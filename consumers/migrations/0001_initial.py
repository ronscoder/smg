# Generated by Django 5.2.3 on 2025-07-12 22:27

import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='CashFlow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('txn_date', models.DateField(default=django.utils.timezone.now)),
                ('txn_text', models.CharField(blank=True, max_length=100, null=True)),
                ('amount', models.FloatField()),
                ('debit', models.BooleanField(default=False)),
                ('txn_ref', models.CharField(blank=True, max_length=50, null=True)),
                ('internal', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EnergyAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('period_from', models.DateField()),
                ('period_to', models.DateField()),
                ('rate', models.FloatField(default=5.1)),
                ('demand_factor', models.FloatField(default=0.45)),
                ('load_factor', models.FloatField(default=0.4)),
                ('fixed_charge', models.FloatField(default=65)),
                ('penalty_factor', models.FloatField(default=3.0)),
            ],
        ),
        migrations.CreateModel(
            name='LoadSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appliance', models.CharField(blank=True, max_length=30, null=True)),
                ('kw', models.FloatField()),
                ('day_hours', models.IntegerField()),
                ('remark', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('consumer_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('contact_nos', models.CharField(blank=True, max_length=30, null=True)),
                ('meter_no', models.CharField(blank=True, max_length=20, null=True)),
                ('connection_id', models.CharField(blank=True, max_length=20, null=True)),
                ('phase', models.CharField(choices=[('SINGLE', 'SINGLE'), ('THREE', 'THREE')], max_length=10)),
                ('current_outstanding', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('bill_upto', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, default='24.823,93.957', null=True)),
                ('connection_type', models.CharField(blank=True, max_length=30, null=True)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='ConsumerHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('raid', models.BooleanField(default=False)),
                ('internal', models.BooleanField(default=False)),
                ('remark', models.CharField(blank=True, max_length=500, null=True)),
                ('theft', models.BooleanField(default=False)),
                ('unused', models.BooleanField(default=False)),
                ('defaulter', models.BooleanField(default=False)),
                ('meter_defective', models.BooleanField(default=False)),
                ('mark', models.BooleanField(default=False)),
                ('meter_replaced', models.BooleanField(default=False)),
                ('disconnected', models.BooleanField(default=False)),
                ('summoned', models.BooleanField(default=False)),
                ('resolution', models.CharField(blank=True, max_length=300, null=True)),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'PENDING'), ('HOLD', 'HOLD'), ('COMPLETED', 'COMPLETED'), ('SKIPPED', 'SKIPPED'), ('', '')], default='')),
                ('status_justification', models.CharField(blank=True, null=True)),
                ('cash_flow', models.ManyToManyField(blank=True, to='consumers.cashflow')),
                ('consumer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='consumers.consumer')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('energy_assessments', models.ManyToManyField(blank=True, to='consumers.energyassessment')),
            ],
        ),
        migrations.AddField(
            model_name='energyassessment',
            name='load_surveys',
            field=models.ManyToManyField(blank=True, to='consumers.loadsurvey'),
        ),
        migrations.CreateModel(
            name='SolarConsumer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity_kw', models.FloatField()),
                ('net_meter_no', models.CharField(max_length=30)),
                ('start_date', models.DateField()),
                ('remark', models.CharField(blank=True, max_length=100, null=True)),
                ('consumer', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumers.consumer')),
            ],
        ),
        migrations.CreateModel(
            name='UnauthConsumer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('contact_nos', models.CharField(blank=True, max_length=30, null=True)),
                ('remark', models.CharField(blank=True, max_length=100, null=True)),
                ('cash_flows', models.ManyToManyField(blank=True, to='consumers.cashflow')),
                ('energy_assessments', models.ManyToManyField(blank=True, to='consumers.energyassessment')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Raid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('observation', models.TextField(blank=True, max_length=200, null=True)),
                ('theft', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('info', models.TextField(blank=True, max_length=200, null=True)),
                ('action', models.TextField(blank=True, max_length=200, null=True)),
                ('is_disconnected', models.BooleanField(default=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('skip', models.BooleanField(default=False)),
                ('cash_flows', models.ManyToManyField(to='consumers.cashflow')),
                ('consumer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumers.consumer')),
                ('energy_assessments', models.ManyToManyField(blank=True, to='consumers.energyassessment')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('unauth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='consumers.unauthconsumer')),
            ],
        ),
    ]
